// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TypeSpecLexer.flex

package jp.s6n.idea.typespec.lang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static jp.s6n.idea.typespec.lang.psi.TypeSpecElementTypes.*;


public class _TypeSpecLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\2\u1f00\1\u2200\1\u2300"+
    "\2\u1f00\31\u0100\1\u2400\121\u0100\1\u2500\4\u0100\1\u2600\1\u0100"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100\1\u2d00"+
    "\10\u2e00\31\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100\1\u5300"+
    "\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600\2\u1f00"+
    "\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00\1\u0100"+
    "\1\u5b00\1\u5c00\11\u1f00\1\u5d00\24\u1f00\1\u5e00\1\u5f00\1\u1f00"+
    "\1\u6000\1\u6100\1\u6200\1\u6300\2\u1f00\1\u6400\5\u1f00\1\u6500"+
    "\1\u6600\1\u6700\5\u1f00\1\u6800\1\u6900\4\u1f00\1\u6a00\21\u1f00"+
    "\246\u0100\1\u6b00\20\u0100\1\u6c00\1\u6d00\25\u0100\1\u6e00\34\u0100"+
    "\1\u6f00\14\u1f00\2\u0100\1\u7000\u0b06\u1f00\1\u7100\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\1\6\1\0\1\7\1\0\1\10\1\11"+
    "\1\12\1\0\1\13\1\14\1\15\1\16\12\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\32\6\1\27"+
    "\1\30\1\31\1\0\1\6\1\0\1\32\1\6\1\33"+
    "\1\34\1\35\1\36\1\37\1\6\1\40\2\6\1\41"+
    "\1\42\1\43\1\44\1\45\1\6\1\46\1\47\1\50"+
    "\1\51\1\52\1\6\1\53\1\54\1\6\1\55\1\56"+
    "\1\57\7\0\1\60\44\0\1\6\12\0\1\6\1\0"+
    "\1\61\2\0\1\6\5\0\27\6\1\0\37\6\1\0"+
    "\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\21\0\160\61\5\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\6\0\1\6\1\61\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\61"+
    "\2\0\246\6\1\0\46\6\2\0\1\6\6\0\51\6"+
    "\10\0\55\61\1\0\1\61\1\0\2\61\1\0\2\61"+
    "\1\0\1\61\10\0\33\6\4\0\4\6\35\0\13\61"+
    "\5\0\53\6\37\61\4\0\2\6\1\61\143\6\1\0"+
    "\1\6\7\61\2\0\6\61\2\6\2\61\1\0\4\61"+
    "\2\6\12\61\3\6\2\0\1\6\20\0\1\6\1\61"+
    "\36\6\33\61\2\0\131\6\13\61\1\6\16\0\12\61"+
    "\41\6\11\61\2\6\4\0\1\6\2\0\1\61\2\0"+
    "\26\6\4\61\1\6\11\61\1\6\3\61\1\6\5\61"+
    "\22\0\31\6\3\61\4\0\13\6\65\0\25\6\1\0"+
    "\10\6\25\0\17\61\1\0\41\61\66\6\3\61\1\6"+
    "\22\61\1\6\7\61\12\6\2\61\2\0\12\61\1\0"+
    "\20\6\3\61\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\61"+
    "\1\6\7\61\2\0\2\61\2\0\3\61\1\6\10\0"+
    "\1\61\4\0\2\6\1\0\3\6\2\61\2\0\12\61"+
    "\2\6\12\0\1\6\1\0\1\61\2\0\3\61\1\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\61\1\0"+
    "\5\61\4\0\2\61\2\0\3\61\3\0\1\61\7\0"+
    "\4\6\1\0\1\6\7\0\14\61\3\6\1\61\13\0"+
    "\3\61\1\0\11\6\1\0\3\6\1\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\61\1\6"+
    "\10\61\1\0\3\61\1\0\3\61\2\0\1\6\17\0"+
    "\2\6\2\61\2\0\12\61\11\0\1\6\6\61\1\0"+
    "\3\61\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\61\1\6"+
    "\7\61\2\0\2\61\2\0\3\61\10\0\2\61\4\0"+
    "\2\6\1\0\3\6\2\61\2\0\12\61\1\0\1\6"+
    "\20\0\1\61\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\61\3\0"+
    "\3\61\1\0\4\61\2\0\1\6\6\0\1\61\16\0"+
    "\12\61\20\0\5\61\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\20\6\3\0\1\6\7\61\1\0\3\61\1\0"+
    "\4\61\7\0\2\61\1\0\3\6\5\0\2\6\2\61"+
    "\2\0\12\61\20\0\1\6\3\61\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\61\1\6\7\61\1\0\3\61\1\0\4\61\7\0"+
    "\2\61\7\0\1\6\1\0\2\6\2\61\2\0\12\61"+
    "\1\0\2\6\15\0\4\61\1\0\10\6\1\0\3\6"+
    "\1\0\51\6\2\61\1\6\7\61\1\0\3\61\1\0"+
    "\4\61\1\6\5\0\3\6\1\61\7\0\3\6\2\61"+
    "\2\0\12\61\12\0\6\6\2\0\2\61\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\61\4\0\6\61\1\0\1\61\1\0\10\61"+
    "\6\0\12\61\2\0\2\61\15\0\60\6\1\61\2\6"+
    "\7\61\5\0\7\6\10\61\1\0\12\61\47\0\2\6"+
    "\1\0\1\6\1\0\5\6\1\0\30\6\1\0\1\6"+
    "\1\0\12\6\1\61\2\6\11\61\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\61\2\0\12\61\2\0\4\6"+
    "\40\0\1\6\27\0\2\61\6\0\12\61\13\0\1\61"+
    "\1\0\1\61\1\0\1\61\4\0\2\61\10\6\1\0"+
    "\44\6\4\0\24\61\1\0\2\61\5\6\13\61\1\0"+
    "\44\61\11\0\1\61\71\0\53\6\24\61\1\6\12\61"+
    "\6\0\6\6\4\61\4\6\3\61\1\6\3\61\2\6"+
    "\7\61\3\6\4\61\15\6\14\61\1\6\17\61\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\115\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\61\11\0\11\61\16\0\20\6\20\0\126\6\2\0"+
    "\6\6\3\0\u016c\6\2\0\21\6\1\0\32\6\5\0"+
    "\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\61"+
    "\13\0\22\6\3\61\13\0\22\6\2\61\14\0\15\6"+
    "\1\0\3\6\1\0\2\61\14\0\64\6\40\61\3\0"+
    "\1\6\4\0\1\6\1\61\2\0\12\61\41\0\3\61"+
    "\2\0\12\61\6\0\131\6\7\0\51\6\1\61\1\6"+
    "\5\0\106\6\12\0\37\6\1\0\14\61\4\0\14\61"+
    "\12\0\12\61\36\6\2\0\5\6\13\0\54\6\4\0"+
    "\32\6\6\0\13\61\45\0\27\6\5\61\4\0\65\6"+
    "\12\61\1\0\35\61\2\0\13\61\6\0\12\61\15\0"+
    "\1\6\10\0\16\61\102\0\5\61\57\6\21\61\7\6"+
    "\4\0\12\61\21\0\11\61\14\0\3\61\36\6\15\61"+
    "\2\6\12\61\54\6\16\61\14\0\44\6\24\61\10\0"+
    "\12\61\3\0\3\6\12\61\44\6\2\0\11\6\7\0"+
    "\53\6\2\0\3\6\20\0\3\61\1\0\25\61\4\6"+
    "\1\61\6\6\1\61\2\6\3\61\1\6\5\0\300\6"+
    "\72\61\1\0\5\61\26\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\53\0\2\60\25\0\2\61\23\0\1\61\34\0\1\6"+
    "\15\0\1\6\20\0\15\6\63\0\15\61\4\0\1\61"+
    "\3\0\14\61\21\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\2\0\6\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\20\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\21\0\51\6\u0177\0\57\6\1\0\57\6"+
    "\1\0\205\6\6\0\4\6\3\61\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\17\0\1\61\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\61\5\0\3\6\31\0"+
    "\11\6\6\61\1\0\5\6\2\0\5\6\4\0\126\6"+
    "\2\0\2\61\5\6\1\0\132\6\1\0\4\6\5\0"+
    "\53\6\1\0\136\6\21\0\33\6\65\0\306\6\112\0"+
    "\360\6\20\0\215\6\103\0\56\6\2\0\15\6\3\0"+
    "\20\6\12\61\2\6\24\0\57\6\1\61\4\0\12\61"+
    "\1\0\37\6\2\61\120\6\2\61\45\0\11\6\2\0"+
    "\147\6\2\0\65\6\2\0\5\6\60\0\13\6\1\61"+
    "\3\6\1\61\4\6\1\61\27\6\5\61\30\0\64\6"+
    "\14\0\2\61\62\6\22\61\12\0\12\61\6\0\22\61"+
    "\6\6\3\0\1\6\1\0\2\6\13\61\34\6\10\61"+
    "\2\0\27\6\15\61\14\0\35\6\3\0\4\61\57\6"+
    "\16\61\16\0\1\6\12\61\6\0\5\6\1\61\12\6"+
    "\12\61\5\6\1\0\51\6\16\61\11\0\3\6\1\61"+
    "\10\6\2\61\2\0\12\61\6\0\27\6\3\0\1\6"+
    "\3\61\62\6\1\61\1\6\3\61\2\6\2\61\5\6"+
    "\2\61\1\6\1\61\1\6\30\0\3\6\2\0\13\6"+
    "\5\61\2\0\3\6\2\61\12\0\6\6\2\0\6\6"+
    "\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6"+
    "\1\0\14\6\10\0\163\6\10\61\1\0\2\61\2\0"+
    "\12\61\6\0\244\6\14\0\27\6\4\0\61\6\4\0"+
    "\u0100\60\156\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\61\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\153\6\22\0\100\6\2\0\66\6\50\0\14\6"+
    "\4\0\20\61\20\0\20\61\3\0\2\61\30\0\3\61"+
    "\40\0\5\6\1\0\207\6\23\0\12\61\7\0\32\6"+
    "\4\0\1\61\1\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\43\0\14\6"+
    "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6"+
    "\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\61"+
    "\202\0\35\6\3\0\61\6\17\0\1\61\37\0\40\6"+
    "\15\0\36\6\5\0\46\6\5\61\5\0\36\6\2\0"+
    "\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0"+
    "\12\61\6\0\44\6\4\0\44\6\4\0\50\6\10\0"+
    "\64\6\234\0\67\6\11\0\26\6\12\0\10\6\230\0"+
    "\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0"+
    "\1\6\2\0\27\6\12\0\27\6\11\0\37\6\101\0"+
    "\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0"+
    "\70\6\6\0\2\6\100\0\1\6\3\61\1\0\2\61"+
    "\5\0\4\61\4\6\1\0\3\6\1\0\35\6\2\0"+
    "\3\61\4\0\1\61\40\0\35\6\3\0\35\6\43\0"+
    "\10\6\1\0\34\6\2\61\31\0\66\6\12\0\26\6"+
    "\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6"+
    "\15\0\63\6\15\0\44\6\4\61\10\0\12\61\306\0"+
    "\35\6\12\0\1\6\10\0\26\6\13\61\217\0\27\6"+
    "\11\0\3\61\65\6\17\61\37\0\12\61\17\0\4\61"+
    "\55\6\13\61\25\0\31\6\7\0\12\61\6\0\3\61"+
    "\44\6\16\61\1\0\12\61\4\0\1\6\2\61\11\0"+
    "\43\6\1\61\2\0\1\6\11\0\3\61\60\6\16\61"+
    "\4\6\4\0\4\61\3\0\12\61\1\6\1\0\1\6"+
    "\43\0\22\6\1\0\31\6\14\61\6\0\1\61\101\0"+
    "\7\6\1\0\1\6\1\0\4\6\1\0\17\6\1\0"+
    "\12\6\7\0\57\6\14\61\5\0\12\61\6\0\4\61"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\1\0\2\61\1\6\7\61"+
    "\2\0\2\61\2\0\3\61\2\0\1\6\6\0\1\61"+
    "\5\0\5\6\2\61\2\0\7\61\3\0\5\61\213\0"+
    "\65\6\22\61\4\6\5\0\12\61\4\0\1\61\1\6"+
    "\40\0\60\6\24\61\2\6\1\0\1\6\10\0\12\61"+
    "\246\0\57\6\7\61\2\0\11\61\27\0\4\6\2\61"+
    "\42\0\60\6\21\61\3\0\1\6\13\0\12\61\46\0"+
    "\53\6\15\61\1\6\7\0\12\61\66\0\33\6\2\0"+
    "\17\61\4\0\12\61\306\0\54\6\17\61\145\0\100\6"+
    "\12\61\25\0\1\6\240\0\10\6\2\0\47\6\7\61"+
    "\2\0\7\61\1\6\1\0\1\6\1\61\33\0\1\6"+
    "\12\61\50\6\7\61\1\6\4\61\10\0\1\61\10\0"+
    "\1\6\13\61\56\6\20\61\3\0\1\6\42\0\71\6"+
    "\7\0\11\6\1\0\45\6\10\61\1\0\10\61\1\6"+
    "\17\0\12\61\30\0\36\6\2\0\26\61\1\0\16\61"+
    "\111\0\7\6\1\0\2\6\1\0\46\6\6\61\3\0"+
    "\1\61\1\0\2\61\1\0\7\61\1\6\1\61\10\0"+
    "\12\61\6\0\6\6\1\0\2\6\1\0\40\6\5\61"+
    "\1\0\2\61\1\0\5\61\1\6\7\0\12\61\u0136\0"+
    "\23\6\4\61\11\0\232\6\146\0\157\6\21\0\304\6"+
    "\274\0\57\6\321\0\107\6\271\0\71\6\7\0\37\6"+
    "\1\0\12\61\146\0\36\6\2\0\5\61\13\0\60\6"+
    "\7\61\11\0\4\6\14\0\12\61\11\0\25\6\5\0"+
    "\23\6\260\0\100\6\200\0\113\6\4\0\1\61\1\6"+
    "\67\61\7\0\4\61\15\6\100\0\2\6\1\0\1\6"+
    "\34\0\370\6\10\0\363\6\15\0\37\6\61\0\3\6"+
    "\21\0\4\6\10\0\u018c\6\4\0\153\6\5\0\15\6"+
    "\3\0\11\6\7\0\12\6\3\0\2\61\306\0\5\61"+
    "\3\0\6\61\10\0\10\61\2\0\7\61\36\0\4\61"+
    "\224\0\3\61\273\0\125\6\1\0\107\6\1\0\2\6"+
    "\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6"+
    "\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6"+
    "\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6"+
    "\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6"+
    "\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\10\6\2\0\151\61"+
    "\4\0\62\61\10\0\1\61\16\0\1\61\26\0\5\61"+
    "\1\0\17\61\120\0\7\61\1\0\21\61\2\0\7\61"+
    "\1\0\2\61\1\0\5\61\325\0\55\6\3\0\7\61"+
    "\7\6\2\0\12\61\4\0\1\6\u0171\0\54\6\16\61"+
    "\6\0\305\6\13\0\7\61\51\0\104\6\7\61\1\6"+
    "\4\0\12\61\246\0\4\6\1\0\33\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6"+
    "\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6"+
    "\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6"+
    "\1\0\5\6\1\0\21\6\104\0\327\6\51\0\65\6"+
    "\13\0\336\6\2\0\u0182\6\16\0\u0131\6\37\0\36\6"+
    "\342\0\360\61\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29184];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\1\1\12\1\1\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\14\5"+
    "\1\25\1\26\1\27\1\3\1\0\1\30\1\31\2\0"+
    "\1\32\1\0\1\33\1\34\10\5\1\35\3\5\1\36"+
    "\7\5\1\37\2\0\1\13\1\5\1\40\1\41\20\5"+
    "\3\0\1\42\1\5\1\43\3\5\1\44\5\5\1\45"+
    "\4\5\1\46\1\42\1\0\1\47\1\50\2\5\1\51"+
    "\2\5\1\52\1\5\1\53\2\5\1\54\1\55\1\5"+
    "\1\47\1\5\1\56\1\57\2\5\1\60\1\61\1\5"+
    "\1\62\2\5\1\63\2\5\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\62\0\62"+
    "\0\62\0\62\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4\0\62"+
    "\0\62\0\62\0\62\0\62\0\u0226\0\62\0\62\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\62\0\62\0\62\0\62\0\u04b0"+
    "\0\62\0\62\0\u04e2\0\u0514\0\u0546\0\u0578\0\62\0\62"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\372\0\u073a\0\u076c\0\u079e\0\372\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\62\0\u092e\0\u0960\0\u0578"+
    "\0\u0992\0\372\0\372\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d16\0\u0d7a"+
    "\0\372\0\u0dac\0\u0dde\0\u0e10\0\372\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\372\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\372"+
    "\0\62\0\u1004\0\u092e\0\372\0\u1036\0\u1068\0\372\0\u109a"+
    "\0\u10cc\0\372\0\u10fe\0\372\0\u1130\0\u1162\0\372\0\372"+
    "\0\u1194\0\62\0\u11c6\0\372\0\372\0\u11f8\0\u122a\0\372"+
    "\0\372\0\u125c\0\372\0\u128e\0\u12c0\0\372\0\u12f2\0\u1324"+
    "\0\372\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\1\27"+
    "\1\30\1\6\1\31\1\32\1\33\1\6\1\34\1\6"+
    "\1\35\1\36\1\37\2\6\1\40\1\41\1\42\1\43"+
    "\2\6\1\44\1\45\1\46\2\2\63\0\3\3\56\0"+
    "\2\4\1\0\1\4\1\47\23\4\1\50\31\4\27\0"+
    "\1\51\25\0\1\52\12\0\1\6\10\0\1\6\12\0"+
    "\23\6\4\0\1\6\17\0\1\16\57\0\1\53\56\0"+
    "\1\54\3\0\1\55\60\0\1\56\1\0\1\16\62\0"+
    "\1\57\67\0\1\60\41\0\1\6\10\0\1\6\12\0"+
    "\7\6\1\61\1\6\1\62\11\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\3\6\1\63\17\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\11\6\1\64"+
    "\7\6\1\65\1\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\1\66\22\6\4\0\1\6\6\0\1\6"+
    "\10\0\1\6\12\0\10\6\1\67\1\70\3\6\1\71"+
    "\5\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\12\6\1\72\10\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\1\73\2\6\1\74\17\6\4\0\1\6"+
    "\6\0\1\6\10\0\1\6\12\0\13\6\1\75\7\6"+
    "\4\0\1\6\6\0\1\6\10\0\1\6\12\0\1\6"+
    "\1\76\21\6\4\0\1\6\6\0\1\6\10\0\1\6"+
    "\12\0\14\6\1\77\5\6\1\100\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\11\6\1\101\3\6\1\102"+
    "\5\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\1\103\11\6\1\104\10\6\4\0\1\6\2\4\1\0"+
    "\57\4\15\0\1\105\44\0\12\106\1\107\47\106\2\55"+
    "\2\0\54\55\1\0\1\55\17\0\1\110\50\0\1\6"+
    "\10\0\1\6\12\0\6\6\1\111\14\6\4\0\1\6"+
    "\6\0\1\6\10\0\1\6\12\0\22\6\1\112\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\1\6\1\113"+
    "\21\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\17\6\1\114\3\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\16\6\1\115\4\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\7\6\1\116\13\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\13\6\1\117"+
    "\7\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\6\6\1\120\7\6\1\121\4\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\2\6\1\122\20\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\10\6\1\123"+
    "\12\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\20\6\1\124\2\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\1\125\22\6\4\0\1\6\6\0\1\6"+
    "\10\0\1\6\12\0\17\6\1\126\3\6\4\0\1\6"+
    "\6\0\1\6\10\0\1\6\12\0\13\6\1\127\7\6"+
    "\4\0\1\6\6\0\1\6\10\0\1\6\12\0\6\6"+
    "\1\130\14\6\4\0\1\6\6\0\1\6\10\0\1\6"+
    "\12\0\6\6\1\131\14\6\4\0\1\6\6\0\1\6"+
    "\10\0\1\6\12\0\7\6\1\132\13\6\4\0\1\6"+
    "\6\0\1\6\10\0\1\6\12\0\6\6\1\133\14\6"+
    "\4\0\1\6\12\106\1\134\47\106\12\135\1\136\3\135"+
    "\1\137\43\135\6\0\1\6\10\0\1\6\12\0\1\140"+
    "\22\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\10\6\1\141\12\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\3\6\1\142\17\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\15\6\1\143\5\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\12\6\1\144"+
    "\10\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\16\6\1\145\4\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\3\6\1\146\17\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\3\6\1\147\17\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\3\6\1\150"+
    "\17\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\3\6\1\151\17\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\7\6\1\152\13\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\3\6\1\153\17\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\3\6\1\154"+
    "\17\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\12\6\1\155\10\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\11\6\1\156\11\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\17\6\1\157\3\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\2\6\1\160"+
    "\20\6\4\0\1\6\16\106\1\161\43\106\12\135\1\162"+
    "\61\135\1\107\3\135\1\163\43\135\6\0\1\6\10\0"+
    "\1\6\12\0\15\6\1\164\5\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\11\6\1\165\2\6\1\166"+
    "\6\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\3\6\1\167\17\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\14\6\1\170\6\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\14\6\1\171\6\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\7\6\1\172"+
    "\13\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\15\6\1\173\5\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\14\6\1\174\6\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\1\175\22\6\4\0\1\6"+
    "\6\0\1\6\10\0\1\6\12\0\12\6\1\176\10\6"+
    "\4\0\1\6\6\0\1\6\10\0\1\6\12\0\11\6"+
    "\1\177\11\6\4\0\1\6\6\0\1\6\10\0\1\6"+
    "\12\0\5\6\1\200\15\6\4\0\1\6\6\0\1\6"+
    "\10\0\1\6\12\0\3\6\1\201\17\6\4\0\1\6"+
    "\16\135\1\202\43\135\6\0\1\6\10\0\1\6\12\0"+
    "\2\6\1\203\20\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\11\6\1\204\11\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\16\6\1\205\4\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\4\6\1\206"+
    "\16\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\13\6\1\207\7\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\14\6\1\210\6\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\4\6\1\211\16\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\12\6\1\212"+
    "\10\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\15\6\1\213\5\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\1\214\22\6\4\0\1\6\6\0\1\6"+
    "\10\0\1\6\12\0\1\215\22\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\4\6\1\216\16\6\4\0"+
    "\1\6\6\0\1\6\10\0\1\6\12\0\1\6\1\217"+
    "\21\6\4\0\1\6\6\0\1\6\10\0\1\6\12\0"+
    "\1\6\1\220\21\6\4\0\1\6\6\0\1\6\10\0"+
    "\1\6\12\0\3\6\1\221\17\6\4\0\1\6\6\0"+
    "\1\6\10\0\1\6\12\0\3\6\1\222\17\6\4\0"+
    "\1\6";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4950];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\4\11\5\1\5\11\1\1\2\11"+
    "\14\1\4\11\1\0\2\11\2\0\1\1\1\0\2\11"+
    "\24\1\1\11\2\0\24\1\3\0\22\1\1\11\1\0"+
    "\17\1\1\11\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _TypeSpecLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TypeSpecLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 54: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 55: break;
          case 3:
            { return STRING_LITERAL;
            }
          // fall through
          case 56: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 57: break;
          case 5:
            { return IDENT;
            }
          // fall through
          case 58: break;
          case 6:
            { return AMP;
            }
          // fall through
          case 59: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 60: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 61: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 62: break;
          case 10:
            { return DOT;
            }
          // fall through
          case 63: break;
          case 11:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 64: break;
          case 12:
            { return COLON;
            }
          // fall through
          case 65: break;
          case 13:
            { return SEMICOLON;
            }
          // fall through
          case 66: break;
          case 14:
            { return LT;
            }
          // fall through
          case 67: break;
          case 15:
            { return EQ;
            }
          // fall through
          case 68: break;
          case 16:
            { return GT;
            }
          // fall through
          case 69: break;
          case 17:
            { return QUEST;
            }
          // fall through
          case 70: break;
          case 18:
            { return AT;
            }
          // fall through
          case 71: break;
          case 19:
            { return LBRACKET;
            }
          // fall through
          case 72: break;
          case 20:
            { return RBRACKET;
            }
          // fall through
          case 73: break;
          case 21:
            { return LBRACE;
            }
          // fall through
          case 74: break;
          case 22:
            { return PIPE;
            }
          // fall through
          case 75: break;
          case 23:
            { return RBRACE;
            }
          // fall through
          case 76: break;
          case 24:
            { return HASHLBRACKET;
            }
          // fall through
          case 77: break;
          case 25:
            { return HASHLBRACE;
            }
          // fall through
          case 78: break;
          case 26:
            { return LINE_COMMENT;
            }
          // fall through
          case 79: break;
          case 27:
            { return COLONCOLON;
            }
          // fall through
          case 80: break;
          case 28:
            { return ATAT;
            }
          // fall through
          case 81: break;
          case 29:
            { return IS;
            }
          // fall through
          case 82: break;
          case 30:
            { return OP;
            }
          // fall through
          case 83: break;
          case 31:
            { return DOTDOTDOT;
            }
          // fall through
          case 84: break;
          case 32:
            { return ANY;
            }
          // fall through
          case 85: break;
          case 33:
            { return DEC;
            }
          // fall through
          case 86: break;
          case 34:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 87: break;
          case 35:
            { return ENUM;
            }
          // fall through
          case 88: break;
          case 36:
            { return INIT;
            }
          // fall through
          case 89: break;
          case 37:
            { return TRUE;
            }
          // fall through
          case 90: break;
          case 38:
            { return VOID;
            }
          // fall through
          case 91: break;
          case 39:
            { return DOC_COMMENT;
            }
          // fall through
          case 92: break;
          case 40:
            { return ALIAS;
            }
          // fall through
          case 93: break;
          case 41:
            { return FALSE;
            }
          // fall through
          case 94: break;
          case 42:
            { return MODEL;
            }
          // fall through
          case 95: break;
          case 43:
            { return NEVER;
            }
          // fall through
          case 96: break;
          case 44:
            { return UNION;
            }
          // fall through
          case 97: break;
          case 45:
            { return USING;
            }
          // fall through
          case 98: break;
          case 46:
            { return EXTERN;
            }
          // fall through
          case 99: break;
          case 47:
            { return IMPORT;
            }
          // fall through
          case 100: break;
          case 48:
            { return SCALAR;
            }
          // fall through
          case 101: break;
          case 49:
            { return TYPEOF;
            }
          // fall through
          case 102: break;
          case 50:
            { return EXTENDS;
            }
          // fall through
          case 103: break;
          case 51:
            { return VALUEOF;
            }
          // fall through
          case 104: break;
          case 52:
            { return INTERFACE;
            }
          // fall through
          case 105: break;
          case 53:
            { return NAMESPACE;
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
