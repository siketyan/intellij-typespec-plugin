// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _TypeSpecLexer.flex

package jp.s6n.idea.typespec.lang.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static jp.s6n.idea.typespec.lang.psi.TypeSpecElementTypes.*;


public class _TypeSpecLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\2\0\1\6\1\0\1\7\1\10\1\11"+
    "\1\0\1\12\1\13\1\14\1\15\12\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\32\26\1\27\1\30"+
    "\1\31\1\0\1\32\1\33\1\34\1\26\1\35\1\36"+
    "\1\37\1\40\1\41\1\26\1\42\2\26\1\43\1\44"+
    "\1\45\1\46\1\47\1\26\1\50\1\51\1\52\1\53"+
    "\1\54\1\26\1\55\1\56\1\26\1\57\1\60\1\61"+
    "\7\0\1\62\u01a2\0\2\62\326\0\u0100\62";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\1"+
    "\13\22\1\25\1\26\1\27\1\3\1\0\1\30\1\31"+
    "\2\0\1\32\1\0\1\33\1\34\2\0\10\22\1\35"+
    "\3\22\1\36\6\22\1\37\2\0\1\12\3\22\1\40"+
    "\1\41\16\22\3\0\1\42\1\22\1\43\7\22\1\44"+
    "\4\22\1\45\1\42\1\0\1\46\1\47\2\22\1\50"+
    "\2\22\1\51\1\22\1\52\1\22\1\53\1\54\1\22"+
    "\1\46\1\22\1\55\1\56\2\22\1\57\1\22\1\60"+
    "\2\22\1\61\2\22\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\63\0\63"+
    "\0\63\0\377\0\u0132\0\u0165\0\u0198\0\u01cb\0\63\0\63"+
    "\0\63\0\63\0\63\0\u01fe\0\u0231\0\63\0\63\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\63\0\63\0\63\0\63\0\u04c8"+
    "\0\63\0\63\0\u04fb\0\u052e\0\u0561\0\u0594\0\63\0\63"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u0231\0\u07c5\0\u07f8\0\u082b\0\u0231\0\u085e"+
    "\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\63\0\u0990\0\u09c3"+
    "\0\u0594\0\63\0\u05c7\0\u09f6\0\u0231\0\u0231\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d26"+
    "\0\u0d8c\0\u0231\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0231\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0231\0\63"+
    "\0\u0ff0\0\u0990\0\u0231\0\u1023\0\u1056\0\u0231\0\u1089\0\u10bc"+
    "\0\u0231\0\u10ef\0\u0231\0\u1122\0\u0231\0\u0231\0\u1155\0\63"+
    "\0\u1188\0\u0231\0\u0231\0\u11bb\0\u11ee\0\u0231\0\u1221\0\u0231"+
    "\0\u1254\0\u1287\0\u0231\0\u12ba\0\u12ed\0\u0231\0\u0231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\1\27"+
    "\1\2\1\30\1\31\1\25\1\32\1\33\1\34\1\25"+
    "\1\35\1\25\1\36\1\37\1\40\3\25\1\41\1\42"+
    "\1\43\2\25\1\44\1\45\1\46\1\2\64\0\3\3"+
    "\57\0\2\4\1\0\1\4\1\47\23\4\1\50\32\4"+
    "\27\0\1\51\27\0\1\52\21\0\1\15\60\0\1\53"+
    "\57\0\1\54\3\0\1\55\61\0\1\56\1\0\1\15"+
    "\63\0\1\57\70\0\1\60\50\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\23\25\4\0\30\61"+
    "\1\62\2\61\1\0\27\61\13\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\7\25\1\63\1\25"+
    "\1\64\11\25\17\0\1\25\2\0\1\25\7\0\1\25"+
    "\3\0\1\25\1\0\3\25\1\65\17\25\17\0\1\25"+
    "\2\0\1\25\7\0\1\25\3\0\1\25\1\0\11\25"+
    "\1\66\7\25\1\67\1\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\1\70\22\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\10\25\1\71\1\72\3\25\1\73\5\25\17\0\1\25"+
    "\2\0\1\25\7\0\1\25\3\0\1\25\1\0\12\25"+
    "\1\74\10\25\17\0\1\25\2\0\1\25\7\0\1\25"+
    "\3\0\1\25\1\0\1\75\2\25\1\76\17\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\13\25\1\77\7\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\14\25\1\100\5\25\1\101"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\11\25\1\102\3\25\1\103\5\25\17\0\1\25"+
    "\2\0\1\25\7\0\1\25\3\0\1\25\1\0\1\104"+
    "\11\25\1\105\10\25\4\0\2\4\1\0\60\4\14\0"+
    "\1\106\46\0\11\107\1\110\51\107\2\55\2\0\56\55"+
    "\17\0\1\111\44\0\30\61\1\62\2\61\1\112\57\61"+
    "\1\62\2\61\1\113\27\61\13\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\6\25\1\114\14\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\22\25\1\115\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\1\25\1\116\21\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\17\25\1\117\3\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\16\25\1\120\4\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\7\25\1\121\13\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\13\25\1\122\7\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\16\25\1\123\4\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\2\25\1\124\20\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\10\25\1\125\12\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\20\25\1\126\2\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\17\25\1\127\3\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\13\25\1\130\7\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\6\25\1\131\14\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\6\25\1\132\14\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\7\25\1\133\13\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\6\25\1\134\14\25\4\0"+
    "\11\107\1\135\51\107\11\136\1\137\3\136\1\140\45\136"+
    "\13\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\1\141\22\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\10\25\1\142\12\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\3\25\1\143\17\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\15\25\1\144\5\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\12\25\1\145\10\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\3\25\1\146\17\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\3\25\1\147\17\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\3\25\1\150\17\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\3\25\1\151\17\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\3\25\1\152\17\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\3\25\1\153\17\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\12\25\1\154\10\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\11\25\1\155\11\25\17\0\1\25\2\0\1\25\7\0"+
    "\1\25\3\0\1\25\1\0\17\25\1\156\3\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\2\25\1\157\20\25\4\0\15\107\1\160\45\107\11\136"+
    "\1\161\62\136\1\110\3\136\1\162\45\136\13\0\1\25"+
    "\2\0\1\25\7\0\1\25\3\0\1\25\1\0\15\25"+
    "\1\163\5\25\17\0\1\25\2\0\1\25\7\0\1\25"+
    "\3\0\1\25\1\0\11\25\1\164\2\25\1\165\6\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\3\25\1\166\17\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\14\25\1\167\6\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\14\25\1\170\6\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\7\25\1\171\13\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\15\25\1\172\5\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\14\25\1\173\6\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\12\25\1\174\10\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\11\25\1\175\11\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\5\25\1\176\15\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\3\25\1\177\17\25"+
    "\4\0\15\136\1\200\45\136\13\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\2\25\1\201\20\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\11\25\1\202\11\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\16\25\1\203\4\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\4\25\1\204\16\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\13\25\1\205\7\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\4\25\1\206\16\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\12\25\1\207\10\25"+
    "\17\0\1\25\2\0\1\25\7\0\1\25\3\0\1\25"+
    "\1\0\15\25\1\210\5\25\17\0\1\25\2\0\1\25"+
    "\7\0\1\25\3\0\1\25\1\0\1\211\22\25\17\0"+
    "\1\25\2\0\1\25\7\0\1\25\3\0\1\25\1\0"+
    "\1\212\22\25\17\0\1\25\2\0\1\25\7\0\1\25"+
    "\3\0\1\25\1\0\4\25\1\213\16\25\17\0\1\25"+
    "\2\0\1\25\7\0\1\25\3\0\1\25\1\0\1\25"+
    "\1\214\21\25\17\0\1\25\2\0\1\25\7\0\1\25"+
    "\3\0\1\25\1\0\1\25\1\215\21\25\17\0\1\25"+
    "\2\0\1\25\7\0\1\25\3\0\1\25\1\0\3\25"+
    "\1\216\17\25\17\0\1\25\2\0\1\25\7\0\1\25"+
    "\3\0\1\25\1\0\3\25\1\217\17\25\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4896];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\4\11\5\1\5\11\2\1\2\11"+
    "\14\1\4\11\1\0\2\11\2\0\1\1\1\0\2\11"+
    "\2\0\23\1\1\11\2\0\1\1\1\11\22\1\3\0"+
    "\20\1\1\11\1\0\16\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _TypeSpecLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TypeSpecLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 52: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 53: break;
          case 3:
            { return STRING_LITERAL;
            }
          // fall through
          case 54: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 55: break;
          case 5:
            { return AMP;
            }
          // fall through
          case 56: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 57: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 58: break;
          case 8:
            { return COMMA;
            }
          // fall through
          case 59: break;
          case 9:
            { return DOT;
            }
          // fall through
          case 60: break;
          case 10:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 61: break;
          case 11:
            { return COLON;
            }
          // fall through
          case 62: break;
          case 12:
            { return SEMICOLON;
            }
          // fall through
          case 63: break;
          case 13:
            { return LT;
            }
          // fall through
          case 64: break;
          case 14:
            { return EQ;
            }
          // fall through
          case 65: break;
          case 15:
            { return GT;
            }
          // fall through
          case 66: break;
          case 16:
            { return QUEST;
            }
          // fall through
          case 67: break;
          case 17:
            { return AT;
            }
          // fall through
          case 68: break;
          case 18:
            { return IDENT;
            }
          // fall through
          case 69: break;
          case 19:
            { return LBRACKET;
            }
          // fall through
          case 70: break;
          case 20:
            { return RBRACKET;
            }
          // fall through
          case 71: break;
          case 21:
            { return LBRACE;
            }
          // fall through
          case 72: break;
          case 22:
            { return PIPE;
            }
          // fall through
          case 73: break;
          case 23:
            { return RBRACE;
            }
          // fall through
          case 74: break;
          case 24:
            { return HASHLBRACKET;
            }
          // fall through
          case 75: break;
          case 25:
            { return HASHLBRACE;
            }
          // fall through
          case 76: break;
          case 26:
            { return LINE_COMMENT;
            }
          // fall through
          case 77: break;
          case 27:
            { return COLONCOLON;
            }
          // fall through
          case 78: break;
          case 28:
            { return ATAT;
            }
          // fall through
          case 79: break;
          case 29:
            { return IS;
            }
          // fall through
          case 80: break;
          case 30:
            { return OP;
            }
          // fall through
          case 81: break;
          case 31:
            { return DOTDOTDOT;
            }
          // fall through
          case 82: break;
          case 32:
            { return ANY;
            }
          // fall through
          case 83: break;
          case 33:
            { return DEC;
            }
          // fall through
          case 84: break;
          case 34:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 85: break;
          case 35:
            { return ENUM;
            }
          // fall through
          case 86: break;
          case 36:
            { return TRUE;
            }
          // fall through
          case 87: break;
          case 37:
            { return VOID;
            }
          // fall through
          case 88: break;
          case 38:
            { return DOC_COMMENT;
            }
          // fall through
          case 89: break;
          case 39:
            { return ALIAS;
            }
          // fall through
          case 90: break;
          case 40:
            { return FALSE;
            }
          // fall through
          case 91: break;
          case 41:
            { return MODEL;
            }
          // fall through
          case 92: break;
          case 42:
            { return NEVER;
            }
          // fall through
          case 93: break;
          case 43:
            { return UNION;
            }
          // fall through
          case 94: break;
          case 44:
            { return USING;
            }
          // fall through
          case 95: break;
          case 45:
            { return EXTERN;
            }
          // fall through
          case 96: break;
          case 46:
            { return IMPORT;
            }
          // fall through
          case 97: break;
          case 47:
            { return TYPEOF;
            }
          // fall through
          case 98: break;
          case 48:
            { return EXTENDS;
            }
          // fall through
          case 99: break;
          case 49:
            { return VALUEOF;
            }
          // fall through
          case 100: break;
          case 50:
            { return INTERFACE;
            }
          // fall through
          case 101: break;
          case 51:
            { return NAMESPACE;
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
