{
  parserClass='jp.s6n.idea.typespec.lang.parser.TypeSpecParser'
  parserUtilClass='jp.s6n.idea.typespec.lang.parser.TypeSpecParserUtil'

  implements='jp.s6n.idea.typespec.lang.psi.TypeSpecElement'
  extends='jp.s6n.idea.typespec.lang.psi.impl.TypeSpecElementImpl'

  elementTypeHolderClass='jp.s6n.idea.typespec.lang.psi.TypeSpecElementTypes'
  elementTypeClass='jp.s6n.idea.typespec.lang.psi.TypeSpecElementType'
  tokenTypeClass='jp.s6n.idea.typespec.lang.psi.TypeSpecTokenType'

  psiClassPrefix='TypeSpec'
  psiImplClassSuffix='Impl'
  psiPackage='jp.s6n.idea.typespec.lang.psi'
  psiImplPackage='jp.s6n.idea.typespec.lang.psi.impl'
  psiImplUtilClass='jp.s6n.idea.typespec.lang.psi.impl.TypeSpecImplUtil'

  tokens=[
    IMPORT          = 'import'
    USING           = 'using'
    NAMESPACE       = 'namespace'
    SCALAR          = 'scalar'
    INIT            = 'init'
    ENUM            = 'enum'
    UNION           = 'union'
    MODEL           = 'model'
    INTERFACE       = 'interface'
    EXTENDS         = 'extends'
    IS              = 'is'
    OP              = 'op'
    ALIAS           = 'alias'
    EXTERN          = 'extern'
    DEC             = 'dec'
    VALUEOF         = 'valueof'
    TYPEOF          = 'typeof'
    TRUE            = 'true'
    FALSE           = 'false'
    VOID            = 'void'
    NEVER           = 'never'
    ANY             = 'any'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    LT              = '<'
    GT              = '>'
    EQ              = '='
    DOTDOTDOT       = '...'
    DOT             = '.'
    COLON           = ':'
    COLONCOLON      = '::'
    SEMICOLON       = ';'
    QUEST           = '?'
    AT              = '@'
    ATAT            = '@@'
    COMMA           = ','
    PIPE            = '|'
    AMP             = '&'
    HASH            = '#'
    HASHLBRACE      = '#{'
    HASHLBRACKET    = '#['

    STRING_LITERAL  = 'regexp:"([^\\"\r\n]|\\[^\r\n])*"?'
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    IDENT           = 'regexp:[$_[\p{ID_Start}&&[^#]]][$\p{ID_Continue}]*'
    WHITE_SPACE     = 'regexp:\s+'

    DOC_COMMENT     = 'regexp:/\*\*([^*]|\*[^/])*\*/'
    BLOCK_COMMENT   = 'regexp:/\*([^*]|\*[^/])*\*/'
    LINE_COMMENT    = 'regexp://.*'
  ]
}

File ::= Statement*

Statement ::=
    ImportStatement
    | UsingStatement
    | NamespaceStatement
    | ScalarStatement
    | EnumStatement
    | UnionStatement
    | ModelStatement
    | InterfaceStatement
    | OperationStatement
    | AliasStatement
    | ExternDecoratorStatement
    | AugmentDecoratorStatement

ImportStatement ::= IMPORT STRING_LITERAL SEMICOLON {extends=Statement}

UsingStatement ::= USING Path SEMICOLON {extends=Statement}

NamespaceStatement ::= DecoratorLike* NAMESPACE Path (SEMICOLON | LBRACE Statement* RBRACE) {extends=Statement}

ScalarStatement ::= DecoratorLike* SCALAR Identifier TypeParameterList? ScalarExtends? (SEMICOLON | ScalarConstructorList)

ScalarExtends ::= EXTENDS TypeReference

ScalarConstructorList ::= LBRACE ScalarConstructor* RBRACE

ScalarConstructor ::= INIT Identifier ParameterList? SEMICOLON

EnumStatement ::= DecoratorLike* ENUM Identifier EnumVariantsBlock {
    extends=Statement
    methods=[getPresentation]
}

EnumVariantsBlock ::= LBRACE [EnumVariant (COMMA EnumVariant)* COMMA?] RBRACE

EnumVariant ::= DecoratorLike* Identifier (COLON LiteralExpression)?

UnionStatement ::= DecoratorLike* UNION Identifier UnionVariantsBlock {
    extends=Statement
    methods=[getPresentation]
}

UnionVariantsBlock ::= LBRACE [(UnionVariant COMMA)* UnionVariant?] RBRACE

UnionVariant ::= DecoratorLike* (Identifier COLON)? Expression

ModelStatement ::= DecoratorLike* MODEL Identifier TypeParameterList? (ModelExtends | ModelIs)? (SEMICOLON | ModelExpression) {
    extends=Statement
    methods=[getPresentation]
}

ModelExtends ::= EXTENDS Expression

ModelIs ::= IS Expression

ModelPropertyLike ::= ModelProperty | SpreadModelProperty

ModelProperty ::= DecoratorLike* Identifier QUEST? COLON Expression (EQ Expression)? (COMMA | SEMICOLON) {extends=ModelPropertyLike}

SpreadModelProperty ::= DOTDOTDOT Expression (COMMA | SEMICOLON) {extends=ModelPropertyLike}

InterfaceStatement ::= DecoratorLike* INTERFACE Identifier TypeParameterList? InterfaceExtends? InterfaceOperationsBlock {
    extends=Statement
    methods=[getPresentation]
}

InterfaceExtends ::= EXTENDS [TypeReference (COMMA TypeReference)*]

InterfaceOperationsBlock ::= LBRACE InterfaceOperation* RBRACE

InterfaceOperation ::= DecoratorLike* Operation SEMICOLON

OperationStatement ::= DecoratorLike* OP Operation SEMICOLON {
    extends=Statement
    methods=[getPresentation]
}

AliasStatement ::= DecoratorLike* ALIAS Identifier TypeParameterList? EQ Expression SEMICOLON {
    extends=Statement
    methods=[getPresentation]
}

ExternDecoratorStatement ::= EXTERN DEC Identifier ParameterList SEMICOLON {
    extends=Statement
    methods=[getPresentation]
}

AugmentDecoratorStatement ::= ATAT Path ArgumentList? SEMICOLON

Operation ::= Identifier TypeParameterList? OperationSignature

OperationSignature ::=
    OperationSignatureDeclarationNode
    | OperationSignatureReferenceNode

OperationSignatureDeclarationNode ::= ParameterList COLON Expression

OperationSignatureReferenceNode ::= IS TypeReference

TypeParameterList ::= LT [(TypeParameter COMMA)* TypeParameter?] GT

TypeParameter ::= Identifier (EXTENDS Expression)? (EQ Expression)?

TypeArgumentList ::= LT [(Expression COMMA)* Expression?] GT

ParameterList ::= LPAREN [(Parameter COMMA)* Parameter?] RPAREN

Parameter ::=
    NamedParameter
    | VariadicParameter

NamedParameter ::= DecoratorLike* Identifier QUEST? (COLON Expression)?

VariadicParameter ::= DOTDOTDOT Expression

DecoratorLike ::= Decorator | Directive

Directive ::= HASH Identifier LiteralExpression*

Decorator ::= AT Path ArgumentList?

ArgumentList ::= LPAREN [(Expression COMMA)* Expression?] RPAREN

Path ::= MemberExpression | Identifier

Expression ::=
    UnionExpression

UnionExpression ::=
    PIPE? [IntersectionExpression (PIPE IntersectionExpression)*]
    {extends=Expression}

IntersectionExpression ::=
    AMP? [OperatorExpression (AMP OperatorExpression)*]
    {extends=UnionExpression}

OperatorExpression ::=
    ValueOfExpression
    | TypeOfExpression
    | CallExpression
    | ArrayExpression
    | NonArrayExpression

ValueOfExpression ::= VALUEOF OperatorExpression {extends=OperatorExpression}

TypeOfExpression ::= TYPEOF OperatorExpression {extends=OperatorExpression}

CallExpression ::= NonArrayExpression ArgumentList {extends=OperatorExpression}

ArrayExpression ::= NonArrayExpression (LBRACKET RBRACKET)+ {extends=OperatorExpression}

NonArrayExpression ::=
    TypeReference
    | MemberExpression
    | TupleExpression
    | ModelExpression
    | ArrayLiteral
    | ObjectLiteral
    | LiteralExpression
    | KeywordExpression

TupleExpression ::= LBRACKET [(Expression COMMA)* Expression?] RBRACKET {extends=NonArrayExpression}

ModelExpression ::= LBRACE ModelPropertyLike* RBRACE {extends=Expression}

ArrayLiteral ::= HASHLBRACKET [(Expression COMMA)* Expression?] RBRACKET {extends=NonArrayExpression}

ObjectLiteral ::= HASHLBRACE [(ObjectLiteralPropertyLike COMMA)* ObjectLiteralPropertyLike?] RBRACE {extends=NonArrayExpression}

private ObjectLiteralPropertyLike ::= ObjectLiteralProperty | SpreadObjectLiteralProperty

ObjectLiteralProperty ::= Identifier COLON Expression

SpreadObjectLiteralProperty ::= DOTDOTDOT Expression

MemberExpression ::= Identifier ((DOT | COLONCOLON) Identifier)+ {extends=NonArrayExpression}

TypeReference ::= Path TypeArgumentList? {extends=NonArrayExpression}

LiteralExpression ::= STRING_LITERAL | NUMERIC_LITERAL | TRUE | FALSE {extends=NonArrayExpression}

KeywordExpression ::= VOID | NEVER | ANY {extends=NonArrayExpression}

Identifier ::= IDENT
