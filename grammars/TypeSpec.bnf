{
  parserClass='jp.s6n.idea.typespec.lang.parser.TypeSpecParser'
  parserUtilClass='jp.s6n.idea.typespec.lang.parser.TypeSpecParserUtil'

  implements='jp.s6n.idea.typespec.lang.psi.TypeSpecElement'
  extends='jp.s6n.idea.typespec.lang.psi.impl.TypeSpecElementImpl'

  elementTypeHolderClass='jp.s6n.idea.typespec.lang.psi.TypeSpecElementTypes'
  elementTypeClass='jp.s6n.idea.typespec.lang.psi.TypeSpecElementType'
  tokenTypeClass='jp.s6n.idea.typespec.lang.psi.TypeSpecTokenType'

  psiClassPrefix='TypeSpec'
  psiImplClassSuffix='Impl'
  psiPackage='jp.s6n.idea.typespec.lang.psi'
  psiImplPackage='jp.s6n.idea.typespec.lang.psi.impl'
  psiImplUtilClass='jp.s6n.idea.typespec.lang.psi.impl.TypeSpecImplUtil'

  tokens=[
    IMPORT          = 'import'
    USING           = 'using'
    NAMESPACE       = 'namespace'
    ENUM            = 'enum'
    UNION           = 'union'
    MODEL           = 'model'
    INTERFACE       = 'interface'
    EXTENDS         = 'extends'
    IS              = 'is'
    OP              = 'op'
    ALIAS           = 'alias'
    EXTERN          = 'extern'
    DEC             = 'dec'
    VALUEOF         = 'valueof'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    LT              = '<'
    GT              = '>'
    EQ              = '='
    DOTDOTDOT       = '...'
    DOT             = '.'
    COLON           = ':'
    SEMICOLON       = ';'
    QUEST           = '?'
    AT              = '@'
    ATAT            = '@@'
    COMMA           = ','
    PIPE            = '|'
    HASH            = '#'

    STRING_LITERAL  = 'regexp:"([^\\"\r\n]|\\[^\r\n])*"?'
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    IDENT           = 'regexp:[a-zA-Z][a-zA-Z0-9\-_]*|`(\\`|[^`])+`'
    WHITE_SPACE     = 'regexp:\s+'

    DOC_COMMENT     = 'regexp:/\*\*([^*]|\*[^/])*\*/'
    BLOCK_COMMENT   = 'regexp:/\*([^*]|\*[^/])*\*/'
    LINE_COMMENT    = 'regexp://.*'
  ]
}

File ::= Statement*

Statement ::=
    ImportStatement
    | UsingStatement
    | NamespaceStatement
    | EnumStatement
    | UnionStatement
    | ModelStatement
    | InterfaceStatement
    | OperationStatement
    | AliasStatement
    | ExternDecoratorStatement
    | AugmentDecoratorStatement

ImportStatement ::= IMPORT STRING_LITERAL SEMICOLON {extends=Statement}

UsingStatement ::= USING Path SEMICOLON {extends=Statement}

NamespaceStatement ::= DecoratorLike* NAMESPACE Path (SEMICOLON | LBRACE Statement* RBRACE) {extends=Statement}

EnumStatement ::= DecoratorLike* ENUM Identifier EnumVariantsBlock {
    extends=Statement
    methods=[getPresentation]
}

EnumVariantsBlock ::= LBRACE [EnumVariant (COMMA EnumVariant)* COMMA?] RBRACE

EnumVariant ::= DecoratorLike* Identifier (COLON LiteralExpression)?

UnionStatement ::= DecoratorLike* UNION Identifier UnionVariantsBlock {
    extends=Statement
    methods=[getPresentation]
}

UnionVariantsBlock ::= LBRACE [UnionVariant (COMMA UnionVariant)* COMMA?] RBRACE

UnionVariant ::= DecoratorLike* (Identifier COLON)? PathType

ModelStatement ::= DecoratorLike* MODEL Identifier TypeParameterList? (ModelExtends | ModelIs)? (SEMICOLON | ModelPropertiesBlock) {
    extends=Statement
    methods=[getPresentation]
}

ModelExtends ::= EXTENDS [PathType (COMMA PathType)*]

ModelIs ::= IS PathType

ModelPropertiesBlock ::= LBRACE ModelProperty* RBRACE

ModelProperty ::= NamedModelProperty | SpreadModelProperty

NamedModelProperty ::= DecoratorLike* Identifier QUEST? COLON Type (EQ Expression)? SEMICOLON {extends=ModelProperty}

SpreadModelProperty ::= DOTDOTDOT PathType SEMICOLON {extends=ModelProperty}

InterfaceStatement ::= DecoratorLike* INTERFACE Identifier TypeParameterList? InterfaceExtends? InterfaceOperationsBlock {
    extends=Statement
    methods=[getPresentation]
}

InterfaceExtends ::= EXTENDS [PathType (COMMA PathType)*]

InterfaceOperationsBlock ::= LBRACE InterfaceOperation* RBRACE

InterfaceOperation ::= DecoratorLike* Operation SEMICOLON

OperationStatement ::= DecoratorLike* OP Operation SEMICOLON {
    extends=Statement
    methods=[getPresentation]
}

AliasStatement ::= ALIAS Identifier EQ Type SEMICOLON {
    extends=Statement
    methods=[getPresentation]
}

ExternDecoratorStatement ::= EXTERN DEC Identifier ParameterList SEMICOLON {
    extends=Statement
    methods=[getPresentation]
}

AugmentDecoratorStatement ::= ATAT PathExpression ArgumentList?

Operation ::= Identifier (OperationSignature | OperationIs)

OperationSignature ::= TypeParameterList? ParameterList COLON Type

OperationIs ::= IS Path

TypeParameterList ::= LT [Identifier (COMMA Identifier)*] GT

TypeArgumentList ::= LT [Type (COMMA Type)*] GT

ParameterList ::= LPAREN [Parameter (COMMA Parameter)*] RPAREN

Parameter ::=
    NamedParameter
    | VariadicParameter

NamedParameter ::= DecoratorLike* Identifier QUEST? COLON Type

VariadicParameter ::= DOTDOTDOT Identifier

DecoratorLike ::= Decorator | Directive

Directive ::= HASH Identifier LiteralExpression*

Decorator ::= AT PathExpression ArgumentList?

ArgumentList ::= LPAREN [Expression (COMMA Expression)*] RPAREN

Expression ::=
    ObjectExpression
    | PathExpression
    | LiteralExpression

ObjectExpression ::= LBRACE [ObjectExpressionProperty (COMMA ObjectExpressionProperty)* COMMA?] RBRACE {extends=Expression}

ObjectExpressionProperty ::= Identifier COLON Expression

PathExpression ::= Path {extends=Expression}

LiteralExpression ::= STRING_LITERAL | NUMERIC_LITERAL {extends=Expression}

Type ::=
    UnionType
    | ValueOfType
    | ArrayType
    | PathType
    | LiteralType

ValueOfType ::= VALUEOF Type {extends=Type}

UnionType ::= Type (PIPE Type)+ {extends=Type}

ArrayType ::= Type LBRACKET RBRACKET {extends=Type}

PathType ::= Path {extends=Type}

LiteralType ::= STRING_LITERAL | NUMERIC_LITERAL {extends=Type}

Path ::= Identifier (DOT Identifier)* TypeArgumentList?

Identifier ::= IDENT
